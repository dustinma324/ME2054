%!PS-Adobe-3.0
%%Title: mpiHeat_v4.c
%%For: tim48
%%Creator: a2ps version 4.14
%%CreationDate: Fri Jan 18 16:30:11 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 6.015779 def
/cw 3.609467 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 101.400000 mul
def
/ph
   521.568041 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.526627 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Parallelizing 2D Heat Equations solver using 5 points equations) N
( *) N
( * Author: Dustin \(Ting-Hsuan\) Ma) N
( *) N
( * To Compile: mpicc -o MPI.exe -lm mpiHeat.c) N
( * To Run: mpirun -np 4 ./MPI.exe) N
( *) N
( */) N
() p n
(#include) K
( <mpi.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(typedef) K
( ) p
(double) k
(       REAL;) p n
(typedef) K
( ) p
(const) K
( ) p
(double) k
( C_REAL;) p n
(typedef) K
( ) p
(int) k
(          INT;) p n
() N
(// Spacial) c n
(#define) K
( LX \( REAL \) 20.0f) p n
(#define) K
( LY \( REAL \) 20.0f) p n
(#define) K
( NX \( INT \) 10) p n
(#define) K
( NY \( INT \) 10) p n
(#define) K
( DX LX / \(\( REAL \) NX - 1.0f\)) p n
(#define) K
( DY LY / \(\( REAL \) NY - 1.0f\)) p n
() N
(// Temperature) c n
(#define) K
( TMAX \( REAL \) 100.0f) p n
(#define) K
( TMIN \( REAL \) 0.0f) p n
() N
(// Time) c n
(#define) K
( DT \( REAL \) 0.25f * DY *DY) p n
(#define) K
( MAXITER 500) p n
() N
(// Calculation index) c n
(#define) K
( IC i + j *NX) p n
(#define) K
( IP1 \(i + 1\) + j *NX) p n
(#define) K
( IM1 \(i - 1\) + j *NX) p n
(#define) K
( JP1 i + \(j + 1\) * NX) p n
(#define) K
( JM1 i + \(j - 1\) * NX) p n
() N
(// Process) c n
(#define) K
( MASTER 0) p n
() N
(void) k
( initializeM\(REAL *in, ) p
(const) K
( ) p
(int) k
( nrow, ) p
(const) K
( ) p
(int) k
( nGhostLayers\)) p n
({) N
(    ) S
(for) K
( \(INT j = 0; j < nrow + nGhostLayers; j++\) {) p n
(        ) S
(for) K
( \(INT i = 0; i < NX; i++\) {) p n
(            ) S
(if) K
( \(j == 1\) {) p n
(                in[ IC ] = TMAX;) N
(            }) N
(            ) S
(if) K
( \(j == nrow + 1\) {) p n
(                in[ IC ] = TMIN;) N
(            }) N
(            ) S
(if) K
( \(i == 0\) {) p n
(                in[ IC ] = TMIN;) N
(            }) N
(            ) S
(if) K
( \(i == NX - 1\) {) p n
(                in[ IC ] = TMIN;) N
(            }) N
(        }) N
(    }) N
(}) N
() N
(void) k
( decomposeMesh_1D\() p
(const) K
( ) p
(int) k
( N, ) p
(const) K
( ) p
(int) k
( nProcs, ) p
(const) K
( ) p
(int) k
( myRank, ) p
(int) k
( *start, ) p
(int) k
( *end\)) p n
({) N
(    *start = myRank * N / nProcs;) N
(    *end   = *start + N / nProcs;) N
(}) N
() N
(void) k
( SolveHeatEQ\(C_REAL *now, REAL *out, ) p
(const) K
( ) p
(int) k
( nrow, ) p
(const) K
( ) p
(int) k
( myRank, ) p
(const) K
( ) p
(int) k
( nProcs\)) p n
({) N
(    ) S
(int) k
( startLoc, endLoc;) p n
() N
(    ) S
(/* Special condition that applies for ROOT process */) c n
(    ) p
(if) K
( \(myRank == MASTER\)) p n
(        startLoc = 2;) N
(    ) S
(else) K n
(        startLoc = 1;) p n
() N
(    ) S
(/* Special condition that applied for nProcs-1 process */) c n
(    ) p
(if) K
( \(myRank == nProcs - 1\)) p n
(        endLoc = nrow;) N
(    ) S
(else) K n
(        endLoc = nrow + 1;) p n
() N
(mpiHeat_v4.c) (Page 1/3) (Jan 18, 19 16:09) title
border
/v 1 store
/x0 x v get 2.526627 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(/* Heat solving iteration only performs calculations on the center cells of matrix */) c n
(    ) p
(for) K
( \(INT j = startLoc; j < endLoc; j++\) {) p n
(        ) S
(for) K
( \(INT i = 1; i < NX - 1; i++\) {) p n
(            out[ IC ] = \(\(\(now[ IP1 ] - 2.0f * now[ IC ] + now[ IM1 ]\) / \(DX * DX\)\)) N
(                         + \(\(now[ JP1 ] - 2.0f * now[ IC ] + now[ JM1 ]\)\) / \(DY * DY\)\)) N
(                        * DT) N
(                        + now[ IC ];) N
(        }) N
(    }) N
(}) N
() N
(/* Blocking send and receive) c n
( *) N
( * Sperately sends NX values down and up, and the respective) N
( * process initiate a receive call.) N
( */) N
(void) k
( exchange_Send_and_Recieve\(REAL *in, ) p
(const) K
( ) p
(int) k
( src, ) p
(const) K
( ) p
(int) k
( dest, ) p
(const) K
( ) p
(int) k
( nrow,) p n
(                               ) S
(const) K
( ) p
(int) k
( myRank\)) p n
({) N
(    ) S
(int) k
( tag0 = 0;                                                           ) p
(// up send tag) c n
(    ) p
(int) k
( tag1 = 1;                                                           ) p
(// down send tag) c n
(    MPI_Send\(in + \(nrow * NX\), NX, MPI_DOUBLE, dest, tag1, MPI_COMM_WORLD\); ) p
(// send to down) c n
(    MPI_Send\(in + NX, NX, MPI_DOUBLE, src, tag0, MPI_COMM_WORLD\);           ) p
(// send to up) c n
() p n
(    MPI_Recv\(in, NX, MPI_DOUBLE, src, tag1, MPI_COMM_WORLD, MPI_STATUS_IGNORE\); ) S
(// receive from up) c n
(    MPI_Recv\(in + \(\(nrow + 1\) * NX\), NX, MPI_DOUBLE, dest, tag0, MPI_COMM_WORLD,) p n
(             MPI_STATUS_IGNORE\); ) S
(// receive from down) c n
(}) p n
() N
(/* Nonblocking send&receive) c n
( *) N
( * The function sends NX values to the bottom process.) N
( * In return, the bottom process also sends NX values) N
( * back up to the top process) N
( */) N
(void) k
( exchange_SendRecv\(REAL *in, ) p
(const) K
( ) p
(int) k
( src, ) p
(const) K
( ) p
(int) k
( dest, ) p
(const) K
( ) p
(int) k
( nrow, ) p
(const) K
( ) p
(int) k
( myRank\)) p n
({) N
(    ) S
(int) k
( tag0 = 0; ) p
(// send tag) c n
(    ) p
(int) k
( tag1 = 1; ) p
(// send tag) c n
(    MPI_Sendrecv\(in + \(nrow * NX\), NX, MPI_DOUBLE, dest, tag0, in, NX, MPI_DOUBLE, src, tag0,) p n
(                 MPI_COMM_WORLD, MPI_STATUS_IGNORE\); ) S
(// Sending down) c n
(    MPI_Sendrecv\(in + NX, NX, MPI_DOUBLE, src, tag1, in + \(nrow + 1\) * NX, NX, MPI_DOUBLE, dest,) p n
(                 tag1, MPI_COMM_WORLD, MPI_STATUS_IGNORE\); ) S
(// Sending up) c n
(}) p n
() N
(void) k
( outputMatrix\(C_REAL *in\)) p n
({) N
(    ) S
(for) K
( \(INT j = 0; j < NY; j++\) {) p n
(        ) S
(for) K
( \(INT i = 0; i < NX; i++\) {) p n
(            printf\(") S
(%8.4f ) str
(", in[ IC ]\);) p n
(        }) N
(        printf\(") S
(\\n) str
("\);) p n
(    }) N
(    printf\(") S
(\\n) str
("\);) p n
(}) N
() N
(void) k
( print2Display\(C_REAL *in, ) p
(const) K
( ) p
(int) k
( start, ) p
(const) K
( ) p
(int) k
( end, ) p
(const) K
( ) p
(int) k
( nrow, ) p
(const) K
( ) p
(int) k
( myRank,) p n
(                   ) S
(const) K
( ) p
(int) k
( nProcs\)) p n
({) N
(    ) S
(int) k
( nGhostLayers = 2;) p n
(    ) S
(for) K
( \() p
(int) k
( j = 0; j < nrow + nGhostLayers; j++\) {) p n
(        ) S
(for) K
( \() p
(int) k
( i = 0; i < NX; i++\) {) p n
(            printf\(") S
(%8.4f ) str
(", in[ IC ]\);) p n
(        }) N
(        printf\(") S
(\\n) str
("\);) p n
(    }) N
(}) N
() N
(int) k
( main\() p
(int) k
( argc, ) p
(char) k
( **argv\)) p n
({) N
(    ) S
(int) k
( nProcs; ) p
(// number of processes) c n
(    ) p
(int) k
( myRank; ) p
(// process rank) c n
(    ) p
(int) k
( src;    ) p
(// handles for communication, source process id) c n
(    ) p
(int) k
( dest;   ) p
(// handles for communication, destination process id) c n
(    ) p
(int) k
( start;  ) p
(// start index for each partial domain) c n
(    ) p
(int) k
( end;    ) p
(// end index for each partial domain) c n
(    ) p
(int) k
( nrow;   ) p
(// number of row needed to be allocated by local array) c n
() p n
(    MPI_Init\(&argc, &argv\);                 ) S
(// initialize MPI) c n
(    MPI_Comm_size\(MPI_COMM_WORLD, &nProcs\); ) p
(// get the number of processes) c n
() p n
(    ) S
(int) k
( nDims = 1; ) p
(// dimension of Cartesian decomposition 1 => slices) c n
(    ) p
(int) k
( dimension[ nDims ];) p n
(    ) S
(int) k
( isPeriodic[ nDims ];) p n
(    ) S
(int) k
( reorder = 1; ) p
(// allow system to optimize\(reorder\) the mapping of processes to physical cores) c n
() p n
(mpiHeat_v4.c) (Page 2/3) (Jan 18, 19 16:09) title
border
grestore
(Printed by tim48) rhead
(mpiHeat_v4.c) (1/2) (Friday January 18, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.526627 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    dimension[ 0 ]  = nProcs;) p n
(    isPeriodic[ 0 ] = 0; ) S
(// periodicty of each dimension) c n
() p n
(    MPI_Comm comm1D; ) S
(// define a communicator that would be assigned a new topology) c n
(    MPI_Cart_create\(MPI_COMM_WORLD, nDims, dimension, isPeriodic, reorder, &comm1D\);) p n
(    MPI_Comm_rank\(MPI_COMM_WORLD, &myRank\); ) S
(// get the rank of a process after REORDERING!) c n
(    MPI_Cart_shift\(comm1D, 0, 1, &src,) p n
(                   &dest\); ) S
(// Let MPI find out the rank of processes for source and destination) c n
() p n
(    ) S
(// Mesh Decompotistion) c n
(    decomposeMesh_1D\(NY, nProcs, myRank, &start, &end\);) p n
(    nrow = \(end - start\);) N
(    printf\(") S
(myRank=%d, mySource=%2.1d, myDestination=%2.1d, nrow=%2.1d, start=%2.1d, end=%2.1d\\n) str
(",) p n
(           myRank, src, dest, nrow, start, end\);) N
(    ) S
(int) k
( nGhostLayers = 2;) p n
(    ) S
(int) k
( AllocSize    = \(nrow + nGhostLayers\) * NX;) p n
() N
(    ) S
(// Allocating Memory for every process after mesh decomposition) c n
(    REAL *local, *local_new, *tmp, *theta_new;) p n
(    local     = \( REAL * \) calloc\(AllocSize, ) S
(sizeof) K
(\(*local\)\);) p n
(    local_new = \( REAL * \) calloc\(AllocSize, ) S
(sizeof) K
(\(*local_new\)\);) p n
() N
(    ) S
(// Allocating/Initializing only within the Root Process) c n
(    ) p
(if) K
( \(myRank == MASTER\) {) p n
(        theta_new) N
(        = \( REAL * \) calloc\(NX * NY, ) S
(sizeof) K
(\(*theta_new\)\); ) p
(// Final output memory allocation) c n
(        initializeM\(local, nrow, nGhostLayers\);) p n
(        initializeM\(local_new, nrow, nGhostLayers\);) N
(    }) N
() N
(    ) S
(// Performing calculation and timing for scalibility) c n
(    MPI_Barrier\(MPI_COMM_WORLD\);) p n
(    ) S
(double) k
( startT = MPI_Wtime\( \);) p n
(    ) S
(for) K
( \() p
(int) k
( iter = 0; iter < MAXITER; iter++\) {) p n
(        ) S
(// exchange_Send_and_Recieve\(local, src, dest, nrow, myRank\);) c 72 T (//Blocking) N
(        exchange_SendRecv\(local, src, dest, nrow, myRank\); ) p
(// Nonblocking) c n
(        SolveHeatEQ\(local, local_new, nrow, myRank, nProcs\);) p n
() N
(        tmp       = local;) N
(        local     = local_new;) N
(        local_new = tmp;) N
(    }) N
(    MPI_Barrier\(MPI_COMM_WORLD\);) N
(    ) S
(double) k
( finishT = MPI_Wtime\( \);) p n
() N
(    ) S
(// Gather data from rest of the processes into Root) c n
(    MPI_Gather\(local + NX, nrow * NX, MPI_DOUBLE, theta_new, nrow * NX, MPI_DOUBLE, MASTER,) p n
(               MPI_COMM_WORLD\);) N
() N
(    ) S
(/*    // Testing) c n
(        if \(myRank == MASTER\) {) N
(            printf\("***********Debug Matrix************\\n"\);) N
(            print2Display\(local, start, end, nrow, myRank, nProcs\);) N
(        }) N
(    */) N
() p n
(    ) S
(// Output data from Root) c n
(    ) p
(if) K
( \(myRank == MASTER\) {) p n
(        printf\(") S
(***********FINAL OUTPUT AFTER GATHER***********\\n) str
("\);) p n
(        outputMatrix\(theta_new\);) N
(    }) N
() N
(    ) S
(// Barrier before recording the finish time) c n
(    ) p
(double) k
( elapsedTime = finishT - startT;) p n
(    ) S
(double) k
( wallTime;) p n
(    MPI_Reduce\(&elapsedTime, &wallTime, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD\);) N
(    ) S
(if) K
( \(myRank == 0\) {) p n
(        printf\(") S
(Wall-clock time = %.3f \(ms\) \\n) str
(", wallTime * 1e3\);) p n
(    }) N
() N
(    ) S
(// Deallocating Arrays) c n
(    free\(local\);) p n
(    free\(local_new\);) N
(    free\(theta_new\);) N
() N
(    local     = ) S
(NULL) K
(;) p n
(    local_new = ) S
(NULL) K
(;) p n
(    theta_new = ) S
(NULL) K
(;) p n
() N
(    MPI_Finalize\( \);) N
(    ) S
(return) K
( EXIT_SUCCESS;) p n
(}) N
(mpiHeat_v4.c) (Page 3/3) (Jan 18, 19 16:09) title
border
grestore
(Printed by tim48) rhead
(mpiHeat_v4.c) (2/2) (Friday January 18, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
